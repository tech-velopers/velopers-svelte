# Velopers 프로젝트 규칙

## 백엔드 요청

### 백엔드 요청 개발
- 백엔드 요청은 `src/lib/config.ts`에 구현된 `getApiUrl` 함수를 사용
- 추가 백엔드 요청 관련 개발시 해당 파일에 추가 필요

### 백엔드 요청 사용 방법 예시
- import { getApiUrl } from "$lib/config";
- const apiUrl = getApiUrl("/api/posts");
- const response = await fetch(apiUrl);
- const data = await response.json();

## 라우팅 구조
이 프로젝트는 SvelteKit 대신 Svelte와 커스텀 라우터를 사용합니다.

### 라우터 구현
- 라우터는 `src/lib/stores/router.ts`에 구현되어 있습니다.
- Svelte store를 사용하여 현재 경로를 관리합니다.
- `currentPath` store와 `navigate` 함수를 제공합니다.

### 라우트 정의
현재 지원하는 라우트:
- `/`: 메인 페이지 (Home.svelte)
- `/about`: 소개 페이지 (About.svelte)
- 그 외 경로: 메인 페이지로 리다이렉트

### 페이지 컴포넌트 위치
- `src/lib/pages/`: 페이지 컴포넌트들이 위치한 디렉토리
  - `Home.svelte`: 메인 페이지
  - `About.svelte`: 소개 페이지

### 네비게이션 사용법
```typescript
import { navigate } from "$lib/stores/router";

// 페이지 이동
navigate('/about');
```

### 현재 경로 구독
```typescript
import { currentPath } from "$lib/stores/router";

// 현재 경로 사용
$: console.log($currentPath);
```

## 주의사항
1. `<a href>` 대신 `navigate` 함수를 사용하여 페이지 이동
2. 외부 링크는 일반 `<a>` 태그 사용 가능
3. 새로운 페이지 추가 시 App.svelte의 라우팅 조건문에 추가 필요 

## 검색 기능

### 검색 Store
- 검색 관련 store는 `src/lib/stores/search.ts`에 구현되어 있습니다.
- `selectedBlogs`와 `selectedTags` store를 통해 선택된 블로그와 태그를 관리합니다.

### 검색 Store 사용법
```typescript
import { selectedBlogs, selectedTags, toggleBlog, toggleTag, resetSelected } from '$lib/stores/search';

// 블로그 토글
toggleBlog({ name: 'blogName', avatar: 'avatar.png' });

// 태그 토글
toggleTag('tagName');

// 선택 초기화
resetSelected();

// store 구독
$: console.log($selectedBlogs, $selectedTags);
```

### 검색 컴포넌트
- `src/lib/components/sidebar/SearchBox.svelte`: 검색 UI 컴포넌트
- 텍스트 검색과 블로그/태그 기반 필터링 기능 제공
- 선택된 블로그와 태그는 AND 조건으로 검색됨 

## 테크블로그 정보 관리

### TechBlogs Store
- 블로그 정보는 `src/lib/stores/techBlogs.ts`에서 중앙 집중적으로 관리됩니다.
- 한 번 로드된 블로그 정보는 페이지 새로고침 전까지 유지됩니다.

### TechBlogs Store 사용법
```typescript
import { store as techBlogsStore, techBlogMap } from '$lib/stores/techBlogs';

// 컴포넌트 마운트 시 블로그 정보 로드
onMount(async () => {
  await techBlogsStore.fetchTechBlogs(); // 데이터가 없을 때만 API 호출
});

// 블로그 정보 구독
techBlogsStore.subscribe((blogs) => {
  // blogs 배열 사용
});

// 블로그 맵 사용 (블로그명으로 빠른 조회)
$: blogInfo = $techBlogMap[blogName];
```

### TechBlogs Store 주의사항
1. 페이지 이동 시 불필요한 API 호출을 피하기 위해 `fetchTechBlogs()`는 데이터가 없을 때만 호출
2. 컴포넌트에서 구독 시 반드시 `onMount` 내에서 구독하고, 컴포넌트 언마운트 시 구독 해제
3. 블로그 정보가 필요한 경우 company.name 대신 techBlogName 사용 

## 포스트 관리

### Posts Store
- 포스트 관련 모든 상태와 로직은 `src/lib/stores/posts.ts`에서 중앙 집중적으로 관리됩니다.
- 검색, 페이징, 카테고리 변경 등의 기능이 포함되어 있습니다.

### Posts Store 사용법
```typescript
import { store as postsStore } from '$lib/stores/posts';

// 포스트 상태 구독
$: posts = $postsStore.posts;
$: currentPage = $postsStore.currentPage;
$: totalPages = $postsStore.totalPages;
$: isLoading = $postsStore.isLoading;
$: error = $postsStore.error;
$: currentCategory = $postsStore.currentCategory;
$: searchQuery = $postsStore.searchQuery;

// 포스트 관련 액션
postsStore.fetchPosts();  // 현재 상태로 포스트 조회
postsStore.setCategory('Frontend');  // 카테고리 변경
postsStore.setPage(2);  // 페이지 변경
postsStore.setSearchQuery('검색어');  // 검색어 설정
postsStore.reset();  // 상태 초기화
```

### Posts Store 주의사항
1. 포스트 관련 상태 변경은 반드시 store의 메서드를 통해 수행
2. 검색, 필터링 등의 로직은 컴포넌트에서 직접 구현하지 않고 store 사용
3. URL 파라미터와 store 상태를 동기화해야 하는 경우 컴포넌트에서 처리
4. 에러 처리는 store의 error 상태를 통해 확인 가능

### Posts Store와 다른 Store의 연동
- `selectedBlogs`와 `selectedTags` store의 값을 사용하여 검색
- store 값이 변경될 때마다 자동으로 포스트 목록 업데이트
- 검색 조건은 AND 조건으로 적용됨 