---
description:  백엔드 API와의 통신에서 사용한 규칙
globs: src/lib/config.ts
---
# 백엔드 API 요청 규칙
# API 규칙

## SvelteKit API 라우트

### 프록시 API 구조
백엔드 API 요청은 SvelteKit의 API 라우트를 통해 프록시됩니다.

```
/api/[...path]/+server.ts
```

이 라우트는 모든 `/api/*` 요청을 받아서 실제 백엔드 서버(`https://tech-blog-hub.vercel.app`)로 전달합니다.

### 클라이언트에서 API 호출
클라이언트 코드에서는 프록시 API를 통해 요청합니다.

```typescript
// ❌ 직접 백엔드 호출 (CORS 문제 발생)
const response = await fetch('https://tech-blog-hub.vercel.app/api/posts');

// ✅ 프록시 API 사용
const response = await fetch('/api/posts');
```

### getApiUrl 함수 사용 (선택적)
기존 코드와의 호환성을 위해 `getApiUrl` 함수를 사용할 수 있습니다.

```typescript
import { getApiUrl } from '$lib/config';

// 개발 환경: http://localhost:8080/api/posts
// 프로덕션: https://server.velopers.kr/api/posts
const response = await fetch(getApiUrl('/api/posts'));
```

### API 엔드포인트
사용 가능한 API 엔드포인트는 `src/lib/config.ts`에 정의되어 있습니다.

```typescript
export const API_ENDPOINTS = {
    posts: '/api/posts',
    tags: '/api/tags',
    allTags: '/api/tags/all',
    users: '/api/users',
    techBlogs: '/api/techBlogs',
    weeklyPosts: '/api/posts/weekly',
    weeklyPostsByCategory: '/api/posts/weekly/category',
} as const;
```

### API 요청 예시

#### GET 요청
```typescript
const response = await fetch('/api/posts?page=1&size=10');
const data = await response.json();
```

#### POST 요청
```typescript
const response = await fetch('/api/posts', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    page: 1,
    size: 10,
    blogs: ['카카오'],
    tags: ['frontend'],
    category: 'all',
    query: ''
  }),
});
const data = await response.json();
```

### 서버 사이드 데이터 로딩
`+page.server.ts`에서 데이터를 미리 로드할 수 있습니다.

```typescript
// +page.server.ts
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ params, fetch }) => {
  const response = await fetch(`/api/blog/${params.slug}`);
  
  if (!response.ok) {
    throw error(404, 'Blog not found');
  }
  
  const blog = await response.json();
  
  return {
    blog
  };
};
```

### 에러 처리
API 요청 시 적절한 에러 처리를 해야 합니다.

```typescript
try {
  const response = await fetch('/api/posts');
  
  if (!response.ok) {
    throw new Error(`API 오류: ${response.status}`);
  }
  
  const data = await response.json();
  return data;
} catch (error) {
  console.error('API 요청 실패:', error);
  // 사용자에게 에러 표시
  throw error;
}
```

### 주의사항
- 클라이언트에서는 항상 프록시 API(`/api/*`)를 사용합니다.
- 실제 백엔드 URL은 `+server.ts` 파일에서만 사용됩니다.
- 서버 사이드 렌더링 시에는 `+page.server.ts`의 `fetch`를 사용합니다.
- API 응답은 항상 에러 처리를 포함해야 합니다.