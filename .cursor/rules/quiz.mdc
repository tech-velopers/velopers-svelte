---
description: 
globs: Quiz.*
alwaysApply: false
---
# Quiz 페이지 사용 방법 및 구현 가이드

Quiz 페이지(`src/lib/pages/Quiz.svelte`)는 사용자가 퀴즈를 풀고, 관리(생성, 수정)할 수 있는 고급 학습 도구입니다.

## 주요 기능

### 핵심 기능
- **퀴즈 진행**: 순차적 또는 랜덤 순서로 퀴즈 풀이 가능
- **카테고리 필터링**: 특정 카테고리 퀴즈만 선별하여 학습
- **답변 다시하기**: 어려운 문제를 나중에 다시 풀도록 설정 (`repeatQuiz`)
- **다시하기 초기화**: "다시하기"로 추가된 모든 퀴즈를 한 번에 제거하고 맨 처음으로 이동 (`resetRepeatQuizzes`)
- **정렬 기능**: 최신순/오래된순으로 퀴즈 정렬 (`sortOrder`)
- **퀴즈 목록 보기**: 전체 퀴즈 목록 탐색 및 직접 이동
- **진행 상태 저장**: 로컬 스토리지 기반 진행 상태 복원
- **비밀번호 인증**: 접근 제한 (비밀번호: `4120`)

### 관리 기능
- **퀴즈 생성**: 새로운 퀴즈 추가 (질문, 답변, 카테고리, 작성자)
- **Dialog 기반 퀴즈 수정**: shadcn-svelte Dialog로 현재 퀴즈에 영향 없이 편집 (repeat 퀴즈도 수정 가능)
- **Sonner 토스트**: shadcn-svelte Sonner 기반 알림 시스템 (800ms 지속)

### 키보드 단축키
- **← / →**: 이전/다음 퀴즈 이동
- **스페이스바**: 답변 보기/숨기기 토글
- **Shift + ?**: 현재 퀴즈 다시하기
- **ESC**: 퀴즈 목록 닫기

## 구현 상세

### 데이터 구조

```typescript
interface Quiz {
  id: string;
  question: string;
  answer: string | null;
  category: string; // 쉼표로 구분된 여러 카테고리
  who: string | null; // 작성자
}

interface SavedProgress {
  currentIndex: number;
  selectedCategories: string[];
  isRandomMode: boolean;
  isAuthenticated: boolean;
  quizOrder?: string[]; // 퀴즈 ID 순서 저장 (랜덤 모드용)
  sortOrder?: 'asc' | 'desc'; // 정렬 순서
}
```

### 상태 관리

1. **퀴즈 데이터**
   - `quizzes`: 전체 퀴즈 배열 (원본 + repeat 퀴즈 포함)
   - `filteredQuizzes`: 카테고리 필터링된 퀴즈 (reactive)
   - `currentQuiz`: 현재 표시 중인 퀴즈 (reactive)
   - `repeatQuizCount`: 다시하기 퀴즈 개수 (reactive)

2. **진행 상태**
   - `currentIndex`: 필터링된 목록 기준 현재 인덱스
   - `showAnswer`: 답변 표시 여부
   - `progressPercentage`: 진행률 계산 (reactive)

3. **모드 및 정렬**
   - `isRandomMode`: 랜덤 모드 활성화 여부
   - `sortOrder`: 'desc'(최신순) | 'asc'(오래된순)

4. **UI 상태**
   - `isEditDialogOpen`: Dialog 기반 퀴즈 수정 모드
   - `isCreating`: 퀴즈 생성 모드
   - `isQuizListOpen`: 퀴즈 목록 표시 여부
   - `isCategoryFilterOpen`: 카테고리 필터 접힘/펼침
   - `isFilterSectionVisible`: 필터링 섹션 전체 표시 여부

5. **카테고리 관리**
   - `selectedCategories`: 선택된 카테고리 배열
   - `allUniqueCategories`: 전체 고유 카테고리 목록 (reactive)

### 로컬 스토리지 활용

- **저장 키**: `velopersQuizProgress`
- **저장 내용**: 
  - 현재 인덱스, 선택된 카테고리, 랜덤/정렬 모드
  - 인증 상태, 퀴즈 순서 (랜덤 모드에서 순서 복원용)
- **자동 저장**: 상태 변경 시 reactive하게 저장
- **복원**: `onMount`에서 인증된 사용자의 이전 상태 복원

### 퀴즈 순서 관리

#### 랜덤 모드 (`isRandomMode: true`)
- `shuffleArray()`: 피셔-예이츠 알고리즘으로 퀴즈 섞기
- 퀴즈 순서를 `quizOrder`에 저장하여 새로고침 후에도 순서 유지
- "다시하기" 시 고유 ID로 중복 퀴즈 생성 (`_repeat_` suffix)

#### 정렬 모드 (`sortOrder`)
- `performSort()`: ID 기준 오름차순/내림차순 정렬
- 'desc': 최신순 (ID 내림차순)
- 'asc': 오래된순 (ID 오름차순)

### 카테고리 시스템

- **다중 카테고리**: 쉼표로 구분하여 여러 카테고리 할당 가능
- **대소문자 무관 필터링**: 카테고리 비교 시 소문자로 정규화
- **동적 카테고리 목록**: 기존 퀴즈들로부터 고유 카테고리 자동 생성
- **필터 UI**: 토글 버튼 형태의 카테고리 선택 인터페이스

### 다시하기 (Repeat) 시스템

#### 개선된 "다시하기" 기능
```typescript
function repeatQuiz() {
  // 고유 ID 생성: 원본ID_repeat_timestamp_random
  const uniqueId = `${currentQuiz.id}_repeat_${Date.now()}_${Math.floor(Math.random() * 10000)}`;
  
  // filteredQuizzes 기준으로 위치 계산 (사용자가 보는 목록 기준)
  const currentFilteredIndex = filteredQuizzes.findIndex(q => q.id === currentQuiz.id);
  const minFilteredPosition = Math.min(currentFilteredIndex + 5, filteredQuizzes.length);
  const maxFilteredPosition = filteredQuizzes.length;
  
  // 랜덤 위치에 삽입 (필터링된 목록에서 실제로 후순위에 나타남)
  const randomFilteredIndex = Math.floor(Math.random() * (maxFilteredPosition - minFilteredPosition)) + minFilteredPosition;
}
```

#### "다시하기" 초기화 기능
```typescript
function resetRepeatQuizzes() {
  // _repeat_가 포함된 모든 퀴즈 제거
  quizzes = quizzes.filter(quiz => !quiz.id.includes('_repeat_'));
  
  // 현재 인덱스를 맨 처음으로 이동
  currentIndex = 0;
  showAnswer = false;
}
```

### Dialog 기반 퀴즈 수정 시스템

- **shadcn-svelte Dialog 사용**: 모달 형태의 수정 인터페이스
- **순서 유지**: 수정 완료 후 `performSort` 호출하지 않아 퀴즈 순서 보존
- **원본 ID 추출**: repeat 퀴즈 수정 시 `_repeat_` 앞부분의 원본 ID 사용
- **동시 업데이트**: repeat 퀴즈 수정 시 원본 퀴즈도 함께 업데이트
- **ID 유지**: repeat 퀴즈의 고유 ID는 유지하면서 내용만 업데이트

```typescript
async function saveChanges() {
  const isRepeatQuiz = currentQuiz.id.includes('_repeat_');
  const originalId = isRepeatQuiz ? currentQuiz.id.split('_repeat_')[0] : currentQuiz.id;
  
  // 원본 ID로 API 호출
  const response = await fetch(`/api/quiz/${originalId}`, {
    method: 'PUT',
    body: JSON.stringify(updatedQuizData)
  });
  
  // 로컬에서 repeat 퀴즈와 원본 퀴즈 모두 업데이트 (순서 유지)
  quizzes = quizzes.map(quiz => {
    if (quiz.id === currentQuiz.id) {
      return { ...savedQuiz, id: currentQuiz.id }; // repeat ID 유지
    } else if (quiz.id === originalId) {
      return savedQuiz; // 원본 퀴즈 업데이트
    }
    return quiz;
  });
  
  // 순서를 유지하기 위해 performSort 호출하지 않음
  isEditDialogOpen = false;
}
```

### Sonner 토스트 시스템

- **shadcn-svelte Sonner 사용**: `svelte-sonner` 패키지 기반
- **위치**: 상단 중앙 (`position="top-center"`)
- **지속 시간**: 800ms (`duration={800}`)
- **타입**: `toast.success()`, `toast.error()`, `toast.info()`

```typescript
// App.svelte에서 설정
<Toaster position="top-center" duration={800} />

// Quiz.svelte에서 사용
import { toast } from "svelte-sonner";
toast.success('퀴즈가 성공적으로 수정되었습니다.');
toast.error('퀴즈 수정 중 오류가 발생했습니다.');
toast.info('이 문제가 나중에 다시 나타납니다.');
```

### 비밀번호 인증

- **비밀번호**: `correctPassword = '4120'` (하드코딩)
- **자동 로그인**: 로컬 스토리지의 인증 정보로 재방문 시 자동 인증
- **인증 후 동작**: 저장된 진행 상태 복원

## API 연동

### 엔드포인트
- **GET** `/api/quiz`: 퀴즈 목록 조회
- **POST** `/api/quiz`: 새 퀴즈 생성
- **PUT** `/api/quiz/:id`: 기존 퀴즈 수정 (repeat 퀴즈는 원본 ID 사용)

### API 사용 예시
```typescript
// 퀴즈 생성
const newQuizData = {
  question: string,
  answer: string | null,
  category: string, // 쉼표 구분
  who: string | null
};

// 퀴즈 수정 (repeat 퀴즈 포함)
const updatedQuizData = {
  ...currentQuiz,
  id: originalId, // repeat 퀴즈인 경우 원본 ID 사용
  question: editedQuestion,
  answer: editedAnswer
};
```

## 사용자 인터페이스

### 반응형 디자인
- **모바일 최적화**: 터치 친화적 UI, 안전 영역 대응
- **다크 모드**: 완전한 다크 테마 지원
- **키보드 네비게이션**: 접근성을 위한 키보드 단축키

### 모바일 최적화
- **버튼 간격**: 모바일에서 `gap-1`, 데스크톱에서 `sm:gap-2`
- **텍스트 숨김/표시**: 모바일에서는 아이콘만, 데스크톱에서는 아이콘+텍스트
- **반응형 클래스**: `hidden sm:inline`, `hidden md:inline` 등 활용
- **진행률 표시**: 모바일에서도 축약형으로 모든 정보 표시

```scss
// 모바일 반응형 버튼 예시
<Button class="text-xs py-1 px-2 h-auto">
  <svg class="h-3.5 w-3.5 sm:mr-1" />
  <span class="hidden sm:inline">텍스트</span>
</Button>
```

### UI 컴포넌트
- **Sonner 토스트**: shadcn-svelte 기반 알림 (800ms 지속)
- **Dialog 수정 모달**: shadcn-svelte Dialog 기반 퀴즈 편집
- **고정 푸터**: 주요 액션 버튼들의 하단 고정 영역
- **접힘식 UI**: 카테고리 필터, 퀴즈 목록의 접힘/펼침
- **진행률 표시**: `현재/전체(+다시하기개수)[백분율]` 형태

### 진행률 표시 개선
```typescript
// 새로운 형식: 25/100(+14)[25%]
<span class="font-medium">
  {currentIndex + 1}/{filteredQuizzes.length}
  {#if repeatQuizCount > 0}
    <span class="text-orange-500 dark:text-orange-400">(+{repeatQuizCount})</span>
  {/if}
  <span class="text-blue-500 dark:text-blue-400 ml-1">[{Math.round((currentIndex + 1) / filteredQuizzes.length * 100)}%]</span>
</span>
```

### 컨트롤 버튼

#### 상단 컨트롤 영역
- **새 퀴즈**: 새로운 퀴즈 생성
- **랜덤**: 퀴즈 순서 무작위 섞기
- **정렬**: 최신순/오래된순 토글
- **수정**: Dialog 기반 현재 퀴즈 편집
- **초기화**: "다시하기" 퀴즈들 모두 제거하고 첫 번째로 이동
- **필터링**: 카테고리 필터 및 목록 표시 토글

#### 하단 고정 영역
- **답변 보기/가리기**: 답변 표시 토글
- **이전/다음**: 퀴즈 네비게이션
- **다시하기**: 현재 퀴즈를 후순위에 추가

### 스타일링 특징
- **애니메이션**: 페이드 효과, 호버 트랜지션
- **터치 최적화**: 더블탭 확대 방지, 텍스트 선택 제어
- **시각적 피드백**: 버튼 상태, 선택된 항목 하이라이트
- **색상 구분**: 
  - 기본 진행률: 기본 텍스트 색상
  - 다시하기 개수: 주황색 (`text-orange-500`)
  - 백분율: 파란색 (`text-blue-500`)

## 개발 가이드

### 새 기능 추가 시 고려사항

1. **상태 저장**: 새로운 상태는 `SavedProgress`에 추가하고 저장/복원 로직 업데이트
2. **반응성**: Svelte의 reactive statement (`$:`) 활용
3. **키보드 지원**: `handleGlobalKeydown`에 새 단축키 추가
4. **모바일 대응**: 터치 동작과 작은 화면 고려
5. **접근성**: ARIA 라벨, 키보드 네비게이션 지원
6. **Dialog 사용**: 복잡한 폼은 Dialog로 분리하여 메인 UI 방해 최소화
7. **토스트 일관성**: Sonner 토스트로 통일된 알림 제공

### 상태 관리 패턴
```typescript
// 반응형 상태 계산
$: filteredQuizzes = selectedCategories.length === 0
  ? quizzes
  : quizzes.filter(/* 필터링 로직 */);

// 다시하기 퀴즈 개수 계산
$: repeatQuizCount = quizzes.filter(quiz => quiz.id.includes('_repeat_')).length;

// 자동 저장
$: if (typeof window !== 'undefined') {
  saveProgressToLocalStorage();
}
```

### 에러 처리
- API 호출 실패 시 Sonner 토스트 알림
- 로컬 스토리지 오류 시 기본값으로 복원
- 존재하지 않는 인덱스 접근 시 안전한 범위로 조정

## 주요 함수 목록

### 핵심 기능 함수
- `nextQuiz()`: 다음 퀴즈로 이동
- `prevQuiz()`: 이전 퀴즈로 이동
- `toggleAnswer()`: 답변 표시/숨김 토글
- `repeatQuiz()`: 현재 퀴즈를 후순위에 추가
- `resetRepeatQuizzes()`: 모든 "다시하기" 퀴즈 제거하고 첫 번째로 이동

### 모드 및 정렬 함수
- `randomQuiz()`: 퀴즈 순서 무작위 섞기
- `toggleSortOrder()`: 정렬 순서 토글
- `performSort()`: 퀴즈 정렬 실행

### 관리 기능 함수
- `startEditing()`: Dialog 기반 수정 모드 진입
- `saveChanges()`: 퀴즈 수정 저장 (순서 보존)
- `cancelEditing()`: 수정 취소
- `startCreating()`: 생성 모드 진입
- `saveNewQuiz()`: 새 퀴즈 저장
- `cancelCreating()`: 생성 취소

### UI 제어 함수
- `toggleQuizList()`: 퀴즈 목록 표시/숨김
- `toggleCategoryFilter()`: 카테고리 필터 펼침/접힘
- `toggleFilterSection()`: 전체 필터링 섹션 표시/숨김
- `toggleCategory()`: 특정 카테고리 선택/해제
- `clearAllCategories()`: 모든 카테고리 선택 해제
- `goToQuiz()`: 특정 인덱스의 퀴즈로 이동

## 유의사항

1. **필수 입력**: 퀴즈 생성 시 `question`과 `category`는 필수
2. **카테고리 형식**: 여러 카테고리는 쉼표로 구분
3. **인덱스 동기화**: 필터링 후 `currentIndex`는 `filteredQuizzes` 기준
4. **ID 고유성**: "다시하기" 퀴즈는 타임스탬프로 고유 ID 보장
5. **키보드 충돌**: input/textarea 포커스 시 전역 키보드 이벤트 무시
6. **성능**: 대용량 퀴즈 목록도 원활한 스크롤과 필터링 지원
7. **Dialog 수정**: Dialog 기반 수정 시 순서가 달라지지 않음
8. **필터링 고려**: "다시하기" 기능은 사용자가 보는 필터링된 목록 기준으로 동작
9. **모바일 최적화**: 텍스트 숨김/표시로 작은 화면에서도 모든 기능 접근 가능
10. **토스트 통일**: 모든 알림은 Sonner 토스트로 일관성 유지
