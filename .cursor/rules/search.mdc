---
description: 블로그명, 태그, 쿼리, 카테고리 기준으로 게시글을 검색할 때 사용
globs: src/lib/stores/search.ts, src/lib/components/sidebar/SearchBox.svelte
---
# 검색 기능 규칙
# 검색 규칙

## 검색 Store 사용

### 검색 상태 관리
검색 관련 모든 상태는 search store를 통해 관리해야 합니다.

```typescript
import { 
  selectedBlogs, 
  selectedTags, 
  searchQuery,
  selectedCategory,
  currentPage,
  toggleBlog, 
  toggleTag, 
  setSearchQuery,
  setCategory,
  setPage,
  resetSelected 
} from '$lib/stores/search';

// 블로그 토글
toggleBlog({ name: 'blogName', avatar: 'avatar.png' });

// 태그 토글
toggleTag('tagName');

// 검색어 설정
setSearchQuery('검색어');

// 카테고리 설정
setCategory('카테고리명');

// 페이지 설정
setPage(1);

// 선택 초기화
resetSelected();

// store 구독
$: console.log($selectedBlogs, $selectedTags, $searchQuery, $selectedCategory, $currentPage);
```

### 검색 조건
- 선택된 블로그와 태그는 AND 조건으로 검색됩니다.
- 검색어와 필터 조건이 모두 적용된 경우, 모든 조건을 만족하는 결과만 표시됩니다.

### 상태 지속성
- 모든 검색 상태(`selectedBlogs`, `selectedTags`, `searchQuery`, `selectedCategory`, `currentPage`)는 자동으로 localStorage에 저장됩니다.
- 페이지를 새로고침하거나 브라우저를 닫았다가 다시 열어도 검색 상태가 유지됩니다.
- URL 파라미터로도 검색 상태를 표현하여 페이지 공유 및 북마크 시 상태가 유지됩니다.

### URL과 상태 동기화 (SvelteKit)
검색 상태가 변경되면 URL을 업데이트하고, URL이 변경되면 검색 상태를 업데이트합니다.

```typescript
import { page } from '$app/stores';
import { goto } from '$app/navigation';

// URL에서 검색 상태 읽기
$: {
  const searchParams = $page.url.searchParams;
  const blogs = searchParams.get('blogs')?.split(',') || [];
  const tags = searchParams.get('tags')?.split(',') || [];
  const query = searchParams.get('q') || '';
  const category = searchParams.get('category') || 'all';
  const pageNum = parseInt(searchParams.get('page') || '1');
  
  // Store 상태 업데이트
  // 필요한 경우 store 메서드 호출
}

// 검색 상태를 URL에 반영
function updateSearchUrl() {
  const url = new URL($page.url);
  
  // 선택된 블로그
  if ($selectedBlogs.length > 0) {
    url.searchParams.set('blogs', $selectedBlogs.map(b => b.name).join(','));
  } else {
    url.searchParams.delete('blogs');
  }
  
  // 선택된 태그
  if ($selectedTags.length > 0) {
    url.searchParams.set('tags', $selectedTags.join(','));
  } else {
    url.searchParams.delete('tags');
  }
  
  // 검색어
  if ($searchQuery) {
    url.searchParams.set('q', $searchQuery);
  } else {
    url.searchParams.delete('q');
  }
  
  // 카테고리
  if ($selectedCategory && $selectedCategory !== 'all') {
    url.searchParams.set('category', $selectedCategory);
  } else {
    url.searchParams.delete('category');
  }
  
  // 페이지
  if ($currentPage > 1) {
    url.searchParams.set('page', $currentPage.toString());
  } else {
    url.searchParams.delete('page');
  }
  
  // URL 업데이트 (히스토리 대체)
  goto(url.toString(), { replaceState: true });
}
```

### 검색 상태 초기화
홈으로 이동하거나 로고 클릭 시 검색 상태를 초기화합니다.

```typescript
import { goto } from '$app/navigation';

// 검색 상태 초기화 및 홈으로 이동
function resetAndGoHome() {
  resetSelected();
  goto('/');
}
```

### 주의사항
- 검색 관련 상태 변경은 반드시 store의 메서드를 통해 수행해야 합니다.
- 컴포넌트에서 직접 검색 상태를 관리하지 않습니다.
- URL과 store 상태의 동기화는 양방향으로 이루어져야 합니다.
- 브라우저의 뒤로가기/앞으로가기 시 검색 상태가 올바르게 복원되어야 합니다.
- 서버 사이드 렌더링을 고려하여 초기 상태를 URL에서 읽어와야 합니다.